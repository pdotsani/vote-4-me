{"version":3,"sources":["../../../../server/api/poll/poll.controller.js"],"names":[],"mappings":"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","file":"poll.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/polls              ->  index\n * POST    /api/polls              ->  create\n * GET     /api/polls/:id          ->  show\n * PUT     /api/polls/:id          ->  update\n * DELETE  /api/polls/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Poll from './poll.model';\nimport mongo from 'mongoose';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Polls\nexport function index(req, res) {\n  return Poll.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a list of polls created by the current user\nexport function filter(req, res){\n  return Poll.find({owner: mongo.Types.ObjectId(req.params.id)})\n      .exec()\n      .then(handleEntityNotFound(res))\n      .then(respondWithResult(res))\n      .catch(handleError(res));\n}\n\n// Gets a single Poll from the DB\nexport function show(req, res) {\n  return Poll.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Poll in the DB\nexport function create(req, res) {\n  console.log('In server: ', req.body);\n  return Poll.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing Poll in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Poll.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\nexport function vote(req, res) {\n  var aVote = req.body.vote;\n  Poll.findById(req.params.id)\n    .exec()\n    .then(handleEntityNotFound(res))\n    .then(function(poll) {\n      var update = poll;\n      update.responses.forEach(function(response) {\n        if(aVote === response.response) response.count++;\n      });\n      update.save()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n    }).catch(handleError(res));\n}\n\n// Deletes a Poll from the DB\nexport function destroy(req, res) {\n  return Poll.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}